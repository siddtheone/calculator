{"version":3,"sources":["reducer/index.js","components/Styled/index.js","components/Button/index.js","store/index.js","components/Buttons/index.js","components/Display/index.js","components/Eq/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","toCalc","screen","isCalculated","operators","reducer","state","action","payload","indexOf","newScreen","toCalcCopy","slice","includes","toString","push","isNaN","x","length","pop","eval","map","e","join","Calculator","styled","div","Screen","Button","button","id","globalState","React","createContext","Provider","Consumer","BUTTONS","label","Buttons","useContext","dispatch","onClick","value","target","Fragment","key","Eq","Global","createGlobalStyle","App","useReducer","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3e4f943.chunk.js","sourcesContent":["export const initialState = {\n    toCalc: [],\n    screen: '0',\n    isCalculated: false,\n}\n\nexport const operators = ['+', '-', 'X', '/'];\n\nexport default function reducer(state, {action, payload}) {\n\n  switch(action) {\n    case 'reset':\n      return {\n        ...initialState,\n        toCalc: [],\n      };\n    case 'enter':\n      const {screen, toCalc, isCalculated} = state;\n\n      if ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, '.'].indexOf(payload) > -1) {\n        let newScreen;\n        const toCalcCopy = toCalc.slice();\n\n        if  ( // Cases to ignore\n            (screen === '0' && payload === 0) ||\n            (screen.includes('.') && payload === '.')\n        ) {\n          newScreen = state.screen;\n        } else if (isCalculated) {\n          return {\n            ...initialState,\n            screen: payload,\n          }\n        } else if (screen === '0' && payload > 0) {\n          newScreen = payload.toString();\n        } else if (operators.indexOf(screen) > -1) {\n          newScreen = payload.toString();\n          toCalcCopy.push(screen);\n        } else {\n          newScreen = screen + payload;\n        }\n        return {\n          toCalc: toCalcCopy,\n          screen: newScreen,\n          isCalculated: false,\n        }\n      } else if (operators.indexOf(payload) > -1) {\n        if(isCalculated) {\n          return {\n            toCalc: [screen],\n            screen: payload,\n            isCalculated: false\n          }\n        }\n\n        if(!isNaN(screen)) {\n          return {\n            toCalc: [...toCalc, screen],\n            screen: payload\n          }\n        } else {\n          if (payload !== '-') {\n            if (screen !== '-') {\n              return {\n                ...state,\n                screen: payload\n              }\n            } else {\n              return {\n                toCalc: [...toCalc.slice(0, -1)],\n                screen: payload,\n              }\n            }\n\n          } else {\n            return {\n              toCalc: [...toCalc, screen],\n              screen: payload\n            }\n          }\n        }\n      }\n      break;\n    case 'calc':\n      if (state.isCalculated) {\n        return state;\n      }\n      const x = [...state.toCalc, state.screen];\n      if (operators.indexOf(x[x.length - 1]) > -1) {\n        x.pop();\n      }\n      return {\n        toCalc: x,\n        isCalculated: true,\n        screen: eval(x.map(e => e === 'X' ? '*' : e).join(' ')).toString()\n      }\n    default:\n      return state;\n  }\n}\n","import styled from 'styled-components';\n\nexport const Calculator = styled.div`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: auto repeat(6, 50px);\n    max-width: 320px;\n    margin: 100px auto;\n    grid-gap: 3px;\n`;\n\nexport const Screen = styled.div`\n    grid-column: 1 / -1;\n    grid-row: span 2;\n    background: var(--screenBG);\n    color: var(--screen);\n    text-align: right;\n    word-break: break-word;\n\n    div {\n      padding-right: 5px;\n    }\n\n    #display {\n      font-weight: bold;\n      font-size: 1.2em;\n    }\n`;\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n    font-family: inherit;\n    font-size: inherit;\n    border: 0;\n    outline: none;\n    transition: .5s;\n    cursor: pointer;\n    background-image: var(${({id}) => id === 'clear' ? '--buttonClearBG' : id === 'equals' ? '--buttonEqualBG' : '--buttonsBG'});\n    color: var(--buttonsText);\n    grid-column: span ${({id}) => ['clear', 'zero'].indexOf(id) > -1 ? '2' : '1'};\n    grid-row: span ${({id}) => id === 'equals' ? '2' : '1'};\n\n    &:active {\n      transform: scale(.9)\n    }\n\n`;\n\nexport default Button;\n\n","import React from 'react';\r\n\r\nconst globalState = React.createContext({});\r\n\r\nexport const Provider = globalState.Provider;\r\nexport const Consumer = globalState.Consumer;\r\n\r\nexport default globalState;","import React from \"react\";\nimport Button from \"../Button\";\nimport globalState from \"../../store\";\n\nconst BUTTONS = [\n  {\n    label: \"AC\",\n    id: \"clear\",\n  },\n  {\n    label: \"/\",\n    id: \"divide\",\n  },\n  {\n    label: \"X\",\n    id: \"multiply\",\n  },\n  {\n    label: \"7\",\n    id: \"seven\",\n  },\n  {\n    label: \"8\",\n    id: \"eight\",\n  },\n  {\n    label: \"9\",\n    id: \"nine\",\n  },\n  {\n    label: \"-\",\n    id: \"subtract\",\n  },\n  {\n    label: \"4\",\n    id: \"four\",\n  },\n  {\n    label: \"5\",\n    id: \"five\",\n  },\n  {\n    label: \"6\",\n    id: \"six\",\n  },\n  {\n    label: \"+\",\n    id: \"add\",\n  },\n  {\n    label: \"1\",\n    id: \"one\",\n  },\n  {\n    label: \"2\",\n    id: \"two\",\n  },\n  {\n    label: \"3\",\n    id: \"three\",\n  },\n  {\n    label: \"=\",\n    id: \"equals\",\n  },\n  {\n    label: \"0\",\n    id: \"zero\",\n  },\n  {\n    label: \".\",\n    id: \"decimal\",\n  },\n];\n\nexport default function Buttons() {\n  const [, dispatch] = React.useContext(globalState);\n\n  const onClick = ({target: {value}}) => dispatch({\n    action: value === 'AC' ? 'reset' : value === '=' ? 'calc' : 'enter',\n    payload: isNaN(value) ? value : +value\n  });\n\n  return (\n    <React.Fragment>\n      {BUTTONS.map((e) => (\n        <Button id={e.id} key={e.id} onClick={onClick} value={e.label}>\n          {e.label}\n        </Button>\n      ))}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\r\nimport globalState from '../../store';\r\n\r\nexport default function Screen() {\r\n  const [{screen}] = React.useContext(globalState);\r\n  return (\r\n    <div id=\"display\">\r\n      {screen}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport globalState from '../../store';\n\nexport default function Eq() {\n  const [{toCalc}] = React.useContext(globalState);\n  return (\n    <div id=\"eq\">\n      {toCalc.join(' ') || 0}\n    </div>\n  )\n}\n","import React from 'react';\nimport {createGlobalStyle} from 'styled-components';\nimport {\n  Calculator, Screen\n} from './components/Styled';\nimport Buttons from './components/Buttons';\nimport Display from './components/Display';\nimport Eq from './components/Eq';\nimport {Provider} from './store';\nimport reducer, {initialState} from './reducer';\n\nconst Global = createGlobalStyle`\n:root {\n  --screenBG: linear-gradient(to right, #ffb347 0%, #ffcc33 51%, #ffb347 100%);\n  --screen: white;\n  --buttonsBG: linear-gradient(to right, #41295a 0%, #2F0743 51%, #41295a 100%);\n  --buttonClearBG: linear-gradient(to right, #f85032 0%, #e73827 51%, #f85032 100%);\n  --buttonEqualBG: linear-gradient(to right, #141E30 0%, #243B55 51%, #141E30 100%);\n  --buttonsText: white;\n}\n*, *::after, *::before {\n  box-sizing: border-box;\n}\nbody {\n  font-family: 'Atomic Age', cursive;\n  font-size: 30px;\n}\n`;\n\nfunction App() {\n  return (\n    <Provider value={React.useReducer(reducer, initialState)}>\n      <div className=\"App\">\n        <Global />\n        <Calculator>\n          <Screen>\n            <Eq />\n            <Display />\n          </Screen>\n          <Buttons />\n        </Calculator>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}